<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Newsletter Summaries</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .stats {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            color: white;
            text-align: center;
        }

        .versions {
            margin-top: 10px;
            font-size: 0.85rem;
        }
        .versions a { color: #e5e7eb; text-decoration: underline; }
        .versions a:hover { color: #fff; }

        .date-group {
            margin-bottom: 40px;
        }

        .date-header {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 15px 20px;
            margin-bottom: 20px;
            font-size: 1.3rem;
            font-weight: 600;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .summary-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

            .card-header {
                color: white;
                padding: 12px;
            }

        .card-title {
            font-size: 1.2rem;
            margin-bottom: 4px;
            font-weight: 600;
        }

        /* Tabellenlayout fÃ¼r kompakte Metadaten */
        .meta-table { width: 100%; border-collapse: collapse; font-size: 0.82rem; }
        .meta-table tr { vertical-align: top; }
        .meta-table th { text-align: left; white-space: nowrap; padding: 2px 8px 2px 0; font-weight: 600; opacity: 0.9; }
        .meta-table td { padding: 2px 12px 2px 0; }

        .meta-item {
            display: flex;
            align-items: center;
        }

        .meta-label {
            font-weight: 600;
            margin-right: 8px;
        }

        .card-content {
            padding: 25px;
        }

        .summary-text {
            font-size: 1.1rem;
            line-height: 1.7;
            color: #555;
        }

        .sources {
            color: #777; /* dezent grau */
            font-size: 0.78rem;
            opacity: 0.95;
            margin-top: 6px;
        }
        .sources a { color: #c9d1d9; text-decoration: underline; }
        .sources a:hover { color: #e5e7eb; }

        .no-summaries {
            text-align: center;
            color: white;
            font-size: 1.2rem;
            padding: 60px 20px;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            color: white;
            opacity: 0.8;
            font-size: 0.9rem;
        }

        /* Hellgrauer Hintergrund fÃ¼r den Bereich mit den Karten */
        .content-area {
            background: #f3f4f6;
            border-radius: 16px;
            padding: 16px;
            margin-top: 16px;
        }

        .date-key {
            background: rgba(255,255,255,0.2);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.8rem;
            margin-left: 10px;
        }

        /* Archiv-Funktionen */
        .card-controls { display: flex; gap: 10px; justify-content: flex-end; margin-bottom: 6px; }
        .card-controls a { color: #888; font-size: 0.8rem; text-decoration: underline; }
        .summary-card.is-archived { display: none; }
        .show-archived .summary-card.is-archived { display: block; opacity: 0.6; }
        .archive-toggle { text-align: right; margin: 8px 0 16px; }
        .archive-toggle a { color: #1f6feb; font-size: 0.85rem; text-decoration: underline; }
        .group-controls { text-align: right; margin: -6px 0 10px; }
        .group-controls a { color: #1f6feb; font-size: 0.85rem; text-decoration: underline; margin-left: 10px; }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .meta-table, .meta-table tbody, .meta-table tr, .meta-table td, .meta-table th { display: block; width: 100%; }
            .meta-table th { margin-top: 6px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ“§ Newsletter Summaries</h1>
            <p>Automatically generated summaries of your "The Briefing" emails</p>
        </div>

        <div class="stats">
            <h3>ðŸ“Š Overview</h3>
            <% total_summaries = summaries.values.flatten.length %>
            <p><strong><%= total_summaries %></strong> summaries available</p>
            <p><strong><%= summaries.keys.length %></strong> different days</p>
            <p>Last updated: <%= Time.now.strftime('%d.%m.%Y at %H:%M') %></p>
            <% if defined?(versions) && versions && versions.any? %>
            <div class="versions">
                Versionen: 
                <% versions.each_with_index do |v, i| %>
                    <a href="html/<%= v %>" target="_blank" rel="noopener">[<%= i+1 %>]</a>
                <% end %>
            </div>
            <% end %>
        </div>

        <div class="content-area">
        <% if summaries.empty? %>
            <div class="no-summaries">
                <h3>ðŸ“­ No summaries available</h3>
                <p>Please run the email processing first:</p>
                <code>bundle exec ruby bin/summarize process</code>
            </div>
        <% else %>
            <% summaries.each do |date_key, date_summaries| %>
                <div class="date-group">
                    <div class="date-header">
                        ðŸ“… <%= format_date_key(date_key) %>
                        <span class="date-key"><%= date_summaries.length %> email<%= 's' if date_summaries.length != 1 %></span>
                    </div>
                    <div class="group-controls" data-date-key="<%= date_key %>">
                        <a href="#" class="archive-all">Alle archivieren</a>
                        <a href="#" class="restore-all">Alle wiederherstellen</a>
                    </div>
                    
                    <% # Sortiere nach PrimÃ¤r-EmpfÃ¤nger-E-Mail (To > Cc > Bcc)
                       sorted = date_summaries.sort_by { |s| primary_recipient_for(s) }
                       sorted.each do |summary| %>
                        <div class="summary-card" data-summary-id="<%= (summary[:message_id] && !summary[:message_id].to_s.strip.empty?) ? summary[:message_id] : summary[:filename] %>">
                            <div class="card-header" style="<%= recipient_gradient_style(summary) %>">
                                <div class="card-title">
                                    <%= summary[:subject] %>
                                </div>
                                <div class="card-controls">
                                    <a href="#" class="archive-link">Archivieren</a>
                                    <a href="#" class="restore-link" style="display:none">Wiederherstellen</a>
                                </div>
                                <table class="meta-table">
                                    <tbody>
                                        <tr>
                                            <th>Datum:</th>
                                            <td><%= summary[:date] %></td>
                                            <th>Von:</th>
                                            <td><%= summary[:from] %></td>
                                        </tr>
                                        <tr>
                                            <th>PrimÃ¤r-EmpfÃ¤nger:</th>
                                            <td><%= primary_recipient_for(summary) %></td>
                                            <th>An:</th>
                                            <td><%= summary[:to].to_s %></td>
                                        </tr>
                                        <tr>
                                            <th>Cc:</th>
                                            <td><%= summary[:cc].to_s %></td>
                                            <th>ID:</th>
                                            <td><%= summary[:message_id]&.split('@')&.first || 'Unknown' %></td>
                                        </tr>
                                        <tr>
                                            <th>Betreff:</th>
                                            <td colspan="3"><%= summary[:subject] %></td>
                                        </tr>
                                        <% if summary[:cc].to_s.strip != '' || summary[:to].to_s.strip != '' %>
                                        <tr>
                                            <th>Matched recipients:</th>
                                            <td colspan="3">
                                                <% recipients = [] %>
                                                <% recipients += summary[:to].to_s.split(',').map(&:strip) if summary[:to] %>
                                                <% recipients += summary[:cc].to_s.split(',').map(&:strip) if summary[:cc] %>
                                                <% recipients = recipients.uniq.reject(&:empty?) %>
                                                <%= recipients.join(', ') %>
                                            </td>
                                        </tr>
                                        <% end %>
                                    </tbody>
                                </table>
                            </div>
                            <div class="card-content">
                                <div class="summary-text">
                                    <%= summary[:summary] %>
                                </div>
                                <% if summary[:sources] && !summary[:sources].empty? %>
                                <div class="sources">
                                    Quellen:
                                    <% summary[:sources].each_with_index do |url, idx| %>
                                        <a href="<%= url %>" target="_blank" rel="noopener" title="<%= url %>">[<%= idx+1 %>]</a>
                                    <% end %>
                                </div>
                                <% end %>
                            </div>
                        </div>
                    <% end %>
                </div>
            <% end %>
        <% end %>
        </div>

        <div class="footer">
            <p>ðŸ¤– Automatically generated with Newsletter Summarizer</p>
            <p>Generated at <%= Time.now.strftime('%d.%m.%Y at %H:%M:%S') %></p>
        </div>
        </div>

        <script>
            // Simple animation on load
            document.addEventListener('DOMContentLoaded', function() {
                const cards = document.querySelectorAll('.summary-card');
                cards.forEach((card, index) => {
                    setTimeout(() => {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 50);
                    }, index * 60);
                });

                // Client-side archivieren ohne Server: in localStorage merken
                // Persistenz Ã¼ber HTML-Neuerstellungen sichern:
                // Key hÃ¤ngt von der Datei-URL (ohne Timestamp) ab, damit mehrere Versionen denselben Speicher verwenden.
                const stableOrigin = (location.pathname.replace(/\/summaries_\d{8}_\d{6}\.html$/, '/summaries_latest.html'));
                const KEY = 'ns_archived_ids_' + stableOrigin;
                const readSet = () => new Set(JSON.parse(localStorage.getItem(KEY) || '[]'));
                const writeSet = (set) => localStorage.setItem(KEY, JSON.stringify(Array.from(set)));

                let archived = readSet();

                // Initialstatus anwenden
                document.querySelectorAll('.summary-card').forEach(card => {
                    const id = card.getAttribute('data-summary-id');
                    if (archived.has(id)) card.classList.add('is-archived');
                });

                // Archivieren/Wiederherstellen-Links
                document.querySelectorAll('.summary-card').forEach(card => {
                    const id = card.getAttribute('data-summary-id');
                    const archiveLink = card.querySelector('.archive-link');
                    const restoreLink = card.querySelector('.restore-link');

                    const syncLinks = () => {
                        const isArchived = card.classList.contains('is-archived');
                        archiveLink.style.display = isArchived ? 'none' : 'inline';
                        restoreLink.style.display = isArchived ? 'inline' : 'none';
                    };
                    syncLinks();

                    archiveLink.addEventListener('click', (e) => {
                        e.preventDefault();
                        card.classList.add('is-archived');
                        archived.add(id);
                        writeSet(archived);
                        syncLinks();
                    });

                    restoreLink.addEventListener('click', (e) => {
                        e.preventDefault();
                        card.classList.remove('is-archived');
                        archived.delete(id);
                        writeSet(archived);
                        syncLinks();
                    });
                });

                // Globale Steuerung: Archivierte ein-/ausblenden
                const toggleContainer = document.createElement('div');
                toggleContainer.className = 'archive-toggle';
                toggleContainer.innerHTML = '<a href="#" id="toggle-archived">Archivierte anzeigen</a>';
                document.querySelector('.container').insertBefore(toggleContainer, document.querySelector('.date-group'));

                const toggleLink = document.getElementById('toggle-archived');
                let showArchived = false;
                const updateToggle = () => { toggleLink.textContent = showArchived ? 'Archivierte verbergen' : 'Archivierte anzeigen'; };
                updateToggle();

                toggleLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    showArchived = !showArchived;
                    document.body.classList.toggle('show-archived', showArchived);
                    updateToggle();
                });

                // Gruppen-Steuerung: Alle archivieren/wiederherstellen pro Datum
                document.querySelectorAll('.group-controls').forEach(gc => {
                    const dateKey = gc.getAttribute('data-date-key');
                    const archiveAll = gc.querySelector('.archive-all');
                    const restoreAll = gc.querySelector('.restore-all');

                    const cardsInGroup = () => {
                        const groupEl = gc.parentElement;
                        return Array.from(groupEl.querySelectorAll('.summary-card'));
                    };

                    archiveAll.addEventListener('click', (e) => {
                        e.preventDefault();
                        cardsInGroup().forEach(card => {
                            const id = card.getAttribute('data-summary-id');
                            if (!archived.has(id)) {
                                archived.add(id);
                                card.classList.add('is-archived');
                            }
                        });
                        writeSet(archived);
                    });

                    restoreAll.addEventListener('click', (e) => {
                        e.preventDefault();
                        cardsInGroup().forEach(card => {
                            const id = card.getAttribute('data-summary-id');
                            if (archived.has(id)) {
                                archived.delete(id);
                                card.classList.remove('is-archived');
                            }
                        });
                        writeSet(archived);
                    });
                });
            });
        </script>
</body>
</html>
